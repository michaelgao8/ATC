{
    "collab_server" : "",
    "contents" : "#' findClass\n#'\n#' This function returns the ATC of the drugs in the medication.\n#' @param the raw medication that user is interested in\n#' @param the tier that user is interested in. Default to 4.\n#' @return two lists: the first list contains the table that maps the medication to its corresponding drugs; the second list contains the tables that map drugs to its ATC\n#' @export\nfindClass = function(medname,tier=4){\n  medname = tolower(medname)\n  tiername = paste0(\"TIER\",tier)\n  map_name = paste0(\"map_by_drug_\", tier,\".csv\")\n  data_get_map = read.csv(file = map_name,stringsAsFactors = FALSE)\n  data_get_drug = read.csv(\"drug_in_med.csv\",stringsAsFactors = FALSE)\n  res_med_to_drug = data_get_drug[which(data_get_drug$MEDNAME == medname),]\n  res_drug_to_class = data_get_map[which(data_get_map$DRUG == res_med_to_drug$DRUG),]\n  if(nrow(res_med_to_drug) >0)\n  {\n    if(nrow(res_med_to_drug)>1)\n    {\n      for(i in 2:nrow(res_med_to_drug))\n      {\n        temp_drug_to_class = data_get_map[which(data_get_map$DRUG == res_med_to_drug$DRUG[i]),]\n        res_drug_to_class = rbind(res_drug_to_class,temp_drug_to_class)\n      }\n    }\n    out = list(res_med_to_drug,res_drug_to_class)\n  } else if(!(grepl(\"-\",medname)||grepl(\"\\\\sIN\\\\s\",medname)))\n  {\n    med = medname %>% as.data.frame() %>% mutate(med_search_1 = sub(pattern = \"(\\\\D+)(\\\\s)(<{0,1})(>{0,1})(={0,1})(\\\\d+)(.*)\", replacement = \"\\\\1\",x = medname)) %>%  mutate(med_search = sub(pattern = \"(\\\\w+\\\\s)(\\\\w+)(\\\\s.*)\",replacement = \"\\\\1\\\\2\",x = med_search_1)) %>%  mutate(med_search = sub(pattern = \"(\\\\w+)\\\\s(\\\\W)(.*)\",replacement = \"\\\\1\",x = med_search)) %>% select(med_search) %>% as.character()\n    # create first table\n    temp_med_to_drug = data.frame(MEDNAME=medname,DRUG=med)\n    # Check if the drug has crreaspongding class\n    if(med %in% data_get_map$DRUG)\n    {\n      res_drug_to_class = data_get_map[which(data_get_map$DRUG == med),]\n      # no need to update the drug to class map if the drug is dlready in the map\n\n      out = list(temp_med_to_drug,res_drug_to_class)\n    } else\n    {\n      #Update the drug to class map\n      url3 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getSearch?query=\",med,\"&searchBy=drug&sourceIds=&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt&isIngredientOnly=true\")\n      tryCatch({\n        r = GET(url3)\n        res <- sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\1\", x = content(r)$tableResult$paths[[1]]$path)\n        res = unique(res)\n        if(length(res)>0){\n          temp_drug_to_class = setNames(data.frame(matrix(ncol = 2, nrow = length(res))), c(\"DRUG\", tiername))\n          for(i in 1:length(res)){\n            # Edit the query\n            res_search <- gsub(' ','+',x = res)\n            # Find the id that also used for searching\n            res_id <-  sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\2\", x = content(r)$tableResult$paths[[1]]$path)\n            url4 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getRelatedTrees?className=\",res_search,\"&sourceId=\",res_id,\"&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt\")\n\n            # Obtain the therapeutic class based on the selected tier\n            drug_class <- unlist(strsplit(content(GET(url4))$paths[[1]]$path,\"\\\\|\"))[tier+1] %>% tolower()\n            temp_drug_to_class = rbind(temp_drug_to_class,c(med,drug_class))\n\n          }\n\n        } else {\n          temp_drug_to_class = data.frame(\"DRUG\" = med,tiername=\"\")\n        }\n        Sys.sleep(.5)\n      },\n      # Error catching\n      error = function(e){temp_drug_to_class = data.frame(\"DRUG\" = med,tiername=\"api error\")})\n      out = list(temp_med_to_drug,temp_drug_to_class)\n    }\n  }else\n  {\n    if(grepl(\"\\\\sIN\\\\s\",medname))\n    {\n      med_2 = medname %>% as.data.frame() %>% mutate(drug_1 = sub(pattern = \"(\\\\w+)\\\\s(.*)\\\\sIN\\\\s(\\\\w+)\\\\s(.*)\", replacement = \"\\\\1\",x = medname),drug_2 = sub(pattern = \"(\\\\w+)\\\\s(.*)\\\\sIN\\\\s(\\\\w+)\\\\s(.*)\", replacement = \"\\\\3\",x = medname)) %>% select(drug_1,drug_2) %>% as.character()\n    }else if(grepl(\"-\",medname))\n    {\n      med_2 = medname %>% as.data.frame() %>% mutate(drug_1 = sub(pattern = \"(\\\\w+)-(\\\\w+)\\\\s(.*)\", replacement = \"\\\\1\",x = medname),drug_2 = sub(pattern = \"(\\\\w+)-(\\\\w+)\\\\s(.*)\", replacement = \"\\\\2\",x = medname))  %>% select(drug_1,drug_2) %>% as.character()\n    }\n    med_to_drug_multi = data.frame(\"MEDNAME\"=rep(medname,2),\"DRUG\" = med_2)\n    temp_drug_to_calss_multi = list(setNames(data.frame(matrix(ncol = 2, nrow = 1)), c(\"DRUG\", tiername)),setNames(data.frame(matrix(ncol = 2, nrow = 1)), c(\"DRUG\", tiername)))\n    for(j in 1:length(med_2))\n    {\n      if(med_2[j] %in% data_get_map$DRUG){\n        res_drug_to_class = data_get_map[which(data_get_map$DRUG == med_2[j]),]\n        # no need to update the drug to class map if the drug is dlready in the map\n        temp_drug_to_calss_multi[[j]] = res_drug_to_class\n      } else{\n        #Update the drug to class map\n        url3 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getSearch?query=\",med_2[j],\"&searchBy=drug&sourceIds=&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt&isIngredientOnly=true\")\n        tryCatch({\n          r = GET(url3)\n          res <- sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\1\", x = content(r)$tableResult$paths[[1]]$path)\n          res = unique(res)\n          if(length(res)>0){\n            res_drug_to_class = data.frame(\"DRUG\" = rep(med_2[j],length(res)), tiername = NA)\n            for(i in 1:length(res)){\n              # Edit the query\n              res_search <- gsub(' ','+',x = res)\n              # Find the id that also used for searching\n              res_id <-  sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\2\", x = content(r)$tableResult$paths[[1]]$path)\n              url4 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getRelatedTrees?className=\",res_search,\"&sourceId=\",res_id,\"&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt\")\n\n              # Obtain the therapeutic class based on the selected tier\n              res_drug_to_class$TIER[i] <- unlist(strsplit(content(GET(url4))$paths[[1]]$path,\"\\\\|\"))[tier+1] %>% tolower()\n\n            }\n            temp_drug_to_calss_multi[[j]] = res_drug_to_class\n\n          } else {\n            temp_drug_to_calss_multi[[j]] = data.frame(\"DRUG\" = med_2[j],tiername=\"\")\n          }\n          Sys.sleep(.5)\n        },\n        # Error catching\n        error = function(e){temp_drug_to_calss_multi[[j]] = data.frame(\"DRUG\" = med_2[j],tiername=\"api error\")})\n      }\n    }\n    out = list(med_to_drug_multi,temp_drug_to_calss_multi)\n  }\n\n  return(out)\n}\n",
    "created" : 1516295952139.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1883193861",
    "id" : "CBA8B8AB",
    "lastKnownWriteTime" : 1516296434,
    "last_content_update" : 1516296434477,
    "path" : "~/ATC/R/findClass.R",
    "project_path" : "R/findClass.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}