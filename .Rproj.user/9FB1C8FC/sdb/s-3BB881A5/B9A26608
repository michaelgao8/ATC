{
    "collab_server" : "",
    "contents" : "#' lad \n#' \n#' It prints the variable of class \"lad\"\n#' @param x observations of class \"lad\"\n#' @param ... further arguments passed to or from other methods\n#' @export\nprint.lad = function(x, ...) {\n  cat(sep=\"\", \"intercept=\",as.numeric(x[1]), \", slope=\",as.numeric(x[2]), \"\\n\")\n}\n\n#' lad \n#' \n#' The function for class \"lad\" that will return the coefficients\n#' @param x observations of class \"lad\"\n#' @param ... further arguments passed to or from other methods\n#' @return estimated coefficients\n#' @export\ncoef.lad = function(x, ...){\n  vect=c(0,0)\n  vect[1]=as.numeric(x[1])\n  vect[2]=as.numeric(x[2])\n  return(vect)\n}\n#' lad \n#' \n#' This function makes a prediction for a newdata and the object of class \"lad\"\n#' @param object observations that are of the class \"lad\"\n#' @param newdata observations that are vectors\n#' @param ... further arguments passed to or from other methods\n#' @return estimated coefficients\n#' @export\npredict.lad = function(object,newdata, ...){\n  predic=numeric(length(newdata))\n  for(i in 1:length(newdata)){\n    predic[i]= object[1]+object[2]*newdata[i]\n  }\n  return(predic)\n}\n\n#' lad \n#' \n#' It takes as arguments vectors x and y and returns a vector of length 2 containing the coefficients of a linear model.\n#' @param x observations of the predictor\n#' @param y observations of the outcome\n#' @param ... further arguments passed to or from other methods\n#' @return estimated coefficients\n#' @export\n#' @examples\n#' require(stats); require(graphics)\n#' states = read.csv(\"http://www.stat.wisc.edu/~jgillett/327-3/2/farmLandArea.csv\")\n#' x=states$land\n#' y=states$farm\n#' lad(x,y)\n#' plot(x,y)\n#' land=0e+00:6e+05\n#' farm=lad(x,y)[1]+lad(x,y)[2]*land\n#' abline(lm(y~x),col=\"black\")\n#' print(lad(x,y))\n#' newdata=seq(from=1000,to=50000,by=1000)\n#' predict(lad(x,y),newdata)\n#' abline(lad(x,y),col=\"red\")\n#' legend(\"topleft\",col=c(\"black\",\"red\"),lty=c(1,1),legend=c(\"lm() line\",\"lad() line\"))\n\nlad = function (x,y) {\n  estimator = function (beta) {\n    rss = 0\n    for (i in 1:length(x)) {\n      rss = rss + abs(y[i]-beta[1]-beta[2]*x[i])\n    }\n    return (rss)\n  }\n  p = c(lm(y~x)$coefficients[1],lm(y~x)$coefficients[2])\n  final=optim(p, estimator)$par\n  class(final)=\"lad\"\n  return(final)\n}\n\n\n",
    "created" : 1516295919354.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1669699233",
    "id" : "B9A26608",
    "lastKnownWriteTime" : 1418323208,
    "last_content_update" : 1418323208,
    "path" : "~/Downloads/zli336/lad/R/lad.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}