{
    "collab_server" : "",
    "contents" : "---\ntitle: \"medications_version_3\"\nauthor: \"Xiaozhou Wang\"\ndate: \"November 16, 2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(warning = FALSE)\nsuppressMessages(library(dplyr))\nsuppressMessages(library(data.table))\nsuppressMessages(library(httr))\nsuppressMessages(library(stringr))\n```\n\n\n```{r}\n# import the files\ndata = read.csv(\"med_freq.csv\",fileEncoding=\"latin1\") \ndata = apply(data,2,tolower) %>% as.data.frame()\nmap = read.csv(\"rxnorm_atc_classmap.csv\",stringsAsFactors = FALSE)\nmap = apply(map,2,tolower) %>% as.data.frame()\n```\n\nCreate a new dataframe based on the picked tier\n```{r}\ntier = 3\ndata_by_drug = map %>% select(c(7,1+tier)) %>% arrange(drug)%>% unique() \nmap_name = paste0(\"map_by_drug_\", tier,\".csv\")\nwrite.csv(data_by_drug,file = map_name,row.names = FALSE)\n#data_check_map = read.csv(file = map_name,stringsAsFactors = FALSE)\n```\n\nDetect the drug component of each medication\n```{r}\ndrug_names = levels(droplevels(map$drug))\ndata_drug = data.frame(MEDNAME = NA, DRUG = NA)\nfor (i in 1:nrow(data)){\n  for(j in 1:length(drug_names)){\n    if(grepl(drug_names[j],data$MEDNAME[i])){\n      temp_data = data.frame(MEDNAME = data$MEDNAME[i], DRUG = drug_names[j])\n      data_drug = rbind(data_drug,temp_data)\n    }\n  }\n}\n\nwrite.csv(data_drug[-1,],\"drug_in_med.csv\",row.names = FALSE)\n#data_check_med = read.csv(\"drug_in_med.csv\",stringsAsFactors = FALSE)\n```\n\ncheck which medication's correasponding drug can not be detected\n```{r}\nun_classified = data.frame(MED_NAME = setdiff(data$MEDNAME,data_drug$MEDNAME))\nwrite.csv(un_classified,\"drug_unclassified.csv\",row.names = FALSE)\ndata_check_un = read.csv(\"drug_unclassified.csv\",stringsAsFactors = FALSE)\nnrow(un_classified)/nrow(data)\n\n# Check how many unique drugs can't be classified \n# mdata_check_un_drug = data_check_un %>% mutate(med_search_1 = sub(pattern = \"(\\\\D+)(\\\\s)(<{0,1})(>{0,1})(={0,1})(\\\\d+)(.*)\", replacement = \"\\\\1\",x = MED_NAME)) %>% \n#   mutate(med_search = sub(pattern = \"(\\\\w+\\\\s)(\\\\w+)(\\\\s.*)\",replacement = \"\\\\1\\\\2\",x = med_search_1)) %>% \n#   mutate(med_search = sub(pattern = \"(\\\\w+\\\\s)(\\\\W)(.*)\",replacement = \"\\\\1\",x = med_search))\n# \n# length(unique(mdata_check_un_drug$med_search))\n\n```\n\n\nBuild the third table for brand component\n```{r}\nun_classified =  read.csv(\"drug_unclassified.csv\",stringsAsFactors = FALSE)\nget_brand_comp = data.frame(MED_NAME = un_classified$MED_NAME, BRAND_COMP = NA)\n\nget_brand_comp = get_brand_comp %>% mutate(BRAND_COMP = sub(pattern = \"(\\\\D+)(\\\\s)(<{0,1})(>{0,1})(={0,1})(\\\\d+)(.*)\", replacement = \"\\\\1\",x = MED_NAME)) %>%\n  mutate(BRAND_COMP = sub(pattern = \"(\\\\w+)(\\\\s\\\\w+)(\\\\s.*)\",replacement = \"\\\\1\",x = BRAND_COMP)) %>% \n  mutate(BRAND_COMP = sub(pattern = \"(\\\\w+)(\\\\W)(.*)\",replacement = \"\\\\1\",x = BRAND_COMP)) %>% \n  mutate(BRAND_COMP = ifelse(grepl(\"\\\\d\",MED_NAME)&grepl(\"^[A-Za-z]{2,}\",BRAND_COMP),BRAND_COMP,NA))\n\n# Check how many unique brands need to be classified \nlength(unique(get_brand_comp$BRAND_COMP))\n\n# Build new dataframe for search\nbrand_check = data.frame(BRAND_COMP = unique(get_brand_comp$BRAND_COMP)[-1], BRAND_GEN_1 = NA,BRAND_GEN_2 = NA,BRAND_GEN_3 = NA,BRAND_GEN_4 = NA )\n\n# Check if RXNorm generic can be found for each detected brand\nfor (brand_num in 1:nrow(brand_check)) {\n  # Here, med is an index of the medication we are looking at.\n  # Next, we break up the string\n  url1 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getSearch?query=\",brand_check$BRAND_COMP[brand_num],\"&searchBy=drug&sourceIds=&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt&isIngredientOnly=true\")\n  tryCatch({\n    r = GET(url1)\n    res <- sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\1\", x = content(r)$tableResult$paths[[1]]$path)\n    \n    if(length(res)>0){\n      # Edit the query\n      res_search <- gsub(' ','+',x = res)\n      # Find the id that also used for searching \n      res_id <-  sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\2\", x = content(r)$tableResult$paths[[1]]$path)\n      url2 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getRelatedTrees?className=\",res_search,\"&sourceId=\",res_id,\"&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt\")\n      \n      # Obtain the therapeutic class based on the selected tier\n      all_tiers <- unlist(strsplit(content(GET(url2))$paths[[1]]$path,\"\\\\|\"))[-1]\n      \n      # Add the obtained information to the data frame\n      brand_check[brand_num,2:5] <- all_tiers\n    } else {\n      brand_check[brand_num,2:5] <- rep(\"\",4)\n    }\n    Sys.sleep(.5)\n  },\n  # Error catching\n  error = function(e){brand_check$BRAND_GEN <- \"api_error\"})\n}\n\nwrite.csv(brand_check,\"brand_check.csv\",row.names = FALSE)\n```\n\nMerge the two data frame and get the final data frame\n```{r}\ndata_brand = merge(x = get_brand_comp, y = brand_check, by = \"BRAND_COMP\", all.x = TRUE)\ndata_brand = data_brand[ , c(2,1,3,4,5,6)]\nwrite.csv(data_brand,\"brand_class.csv\",row.names = FALSE)\ndata_brand_full = data_brand[,]\n```\n\nCheck the classification rate\n```{r}\n\noverall_classification_brand = sum(length(na.omit(data_brand$BRAND_GEN_1) > 1))/nrow(data_brand);overall_classification_brand\nunique_classification_brand = sum(length(na.omit(brand_check$BRAND_GEN_1 > 1)))/nrow(brand_check);unique_classification_brand\n\n##SUMMARY##\n# total missing:10877\n# check unique brand: 2819, get 2557 back \n# total missing:10877 -> 10877-7559 = 3318\n```\n\n# Function for finding the class of one medication, if not in the table, use API and update the table\n```{r}\ndata_med_to_drug = read.csv(\"drug_in_med.csv\",stringsAsFactors = FALSE)\ndata_drug_1 = read.csv(\"map_by_drug_1.csv\",stringsAsFactors = FALSE)\ndata_drug_2 = read.csv(\"map_by_drug_2.csv\",stringsAsFactors = FALSE)\ndata_drug_3 = read.csv(\"map_by_drug_3.csv\",stringsAsFactors = FALSE)\ndata_drug_4 = read.csv(\"map_by_drug_4.csv\",stringsAsFactors = FALSE) \n\nfindClass = function(medname,tier){\n  medname = tolower(medname)\n  tiername = paste0(\"TIER\",tier)\n  map_name = paste0(\"map_by_drug_\", tier,\".csv\")\n  data_get_map = read.csv(file = map_name,stringsAsFactors = FALSE)\n  data_get_drug = read.csv(\"drug_in_med.csv\",stringsAsFactors = FALSE)\n  res_med_to_drug = data_get_drug[which(data_get_drug$MEDNAME == medname),]\n  res_drug_to_class = data_get_map[which(data_get_map$DRUG == res_med_to_drug$DRUG),]\n  if(nrow(res_med_to_drug) >0)\n  {\n    if(nrow(res_med_to_drug)>1)\n    {\n      for(i in 2:nrow(res_med_to_drug))\n      {\n        temp_drug_to_class = data_get_map[which(data_get_map$DRUG == res_med_to_drug$DRUG[i]),]\n        res_drug_to_class = rbind(res_drug_to_class,temp_drug_to_class)\n      }\n    }\n    out = list(res_med_to_drug,res_drug_to_class)\n  } else if(!(grepl(\"-\",medname)||grepl(\"\\\\sIN\\\\s\",medname)))\n  {\n    med = medname %>% as.data.frame() %>% mutate(med_search_1 = sub(pattern = \"(\\\\D+)(\\\\s)(<{0,1})(>{0,1})(={0,1})(\\\\d+)(.*)\", replacement = \"\\\\1\",x = medname)) %>%  mutate(med_search = sub(pattern = \"(\\\\w+\\\\s)(\\\\w+)(\\\\s.*)\",replacement = \"\\\\1\\\\2\",x = med_search_1)) %>%  mutate(med_search = sub(pattern = \"(\\\\w+)\\\\s(\\\\W)(.*)\",replacement = \"\\\\1\",x = med_search)) %>% select(med_search) %>% as.character()\n    # create first table\n    temp_med_to_drug = data.frame(MEDNAME=medname,DRUG=med)\n    # Check if the drug has crreaspongding class\n    if(med %in% data_get_map$DRUG)\n    {\n      res_drug_to_class = data_get_map[which(data_get_map$DRUG == med),]\n      # no need to update the drug to class map if the drug is dlready in the map\n      \n      out = list(temp_med_to_drug,res_drug_to_class)\n    } else\n    {\n      #Update the drug to class map\n      url3 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getSearch?query=\",med,\"&searchBy=drug&sourceIds=&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt&isIngredientOnly=true\")\n      tryCatch({\n        r = GET(url3)\n        res <- sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\1\", x = content(r)$tableResult$paths[[1]]$path)\n        res = unique(res)\n        if(length(res)>0){\n          temp_drug_to_class = setNames(data.frame(matrix(ncol = 2, nrow = length(res))), c(\"DRUG\", tiername))\n          for(i in 1:length(res)){\n            # Edit the query\n            res_search <- gsub(' ','+',x = res)\n            # Find the id that also used for searching \n            res_id <-  sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\2\", x = content(r)$tableResult$paths[[1]]$path)\n            url4 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getRelatedTrees?className=\",res_search,\"&sourceId=\",res_id,\"&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt\")\n            \n            # Obtain the therapeutic class based on the selected tier\n            drug_class <- unlist(strsplit(content(GET(url4))$paths[[1]]$path,\"\\\\|\"))[tier+1] %>% tolower()\n            temp_drug_to_class = rbind(temp_drug_to_class,c(med,drug_class))\n            \n          }\n          \n        } else {\n          temp_drug_to_class = data.frame(\"DRUG\" = med,tiername=\"\")\n        }\n        Sys.sleep(.5)\n      },\n      # Error catching\n      error = function(e){temp_drug_to_class = data.frame(\"DRUG\" = med,tiername=\"api error\")})\n      out = list(temp_med_to_drug,temp_drug_to_class)\n    } \n  }else\n  {\n    if(grepl(\"\\\\sIN\\\\s\",medname))\n    {\n      med_2 = medname %>% as.data.frame() %>% mutate(drug_1 = sub(pattern = \"(\\\\w+)\\\\s(.*)\\\\sIN\\\\s(\\\\w+)\\\\s(.*)\", replacement = \"\\\\1\",x = medname),drug_2 = sub(pattern = \"(\\\\w+)\\\\s(.*)\\\\sIN\\\\s(\\\\w+)\\\\s(.*)\", replacement = \"\\\\3\",x = medname)) %>% select(drug_1,drug_2) %>% as.character()\n    }else if(grepl(\"-\",medname))\n    {\n      med_2 = medname %>% as.data.frame() %>% mutate(drug_1 = sub(pattern = \"(\\\\w+)-(\\\\w+)\\\\s(.*)\", replacement = \"\\\\1\",x = medname),drug_2 = sub(pattern = \"(\\\\w+)-(\\\\w+)\\\\s(.*)\", replacement = \"\\\\2\",x = medname))  %>% select(drug_1,drug_2) %>% as.character()\n    }\n    med_to_drug_multi = data.frame(\"MEDNAME\"=rep(medname,2),\"DRUG\" = med_2)\n    temp_drug_to_calss_multi = list(setNames(data.frame(matrix(ncol = 2, nrow = 1)), c(\"DRUG\", tiername)),setNames(data.frame(matrix(ncol = 2, nrow = 1)), c(\"DRUG\", tiername)))\n    for(j in 1:length(med_2))\n    {\n      if(med_2[j] %in% data_get_map$DRUG){\n        res_drug_to_class = data_get_map[which(data_get_map$DRUG == med_2[j]),]\n        # no need to update the drug to class map if the drug is dlready in the map\n        temp_drug_to_calss_multi[[j]] = res_drug_to_class\n      } else{\n        #Update the drug to class map\n        url3 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getSearch?query=\",med_2[j],\"&searchBy=drug&sourceIds=&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt&isIngredientOnly=true\")\n        tryCatch({\n          r = GET(url3)\n          res <- sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\1\", x = content(r)$tableResult$paths[[1]]$path)\n          res = unique(res)\n          if(length(res)>0){\n            res_drug_to_class = data.frame(\"DRUG\" = rep(med_2[j],length(res)), tiername = NA)\n            for(i in 1:length(res)){\n              # Edit the query\n              res_search <- gsub(' ','+',x = res)\n              # Find the id that also used for searching \n              res_id <-  sub(pattern=\"IN\\\\|ATC1-4\\\\|{2}(.*)\\\\|(\\\\w\\\\d{2}\\\\w{2})(.*)\",replacement = \"\\\\2\", x = content(r)$tableResult$paths[[1]]$path)\n              url4 <- paste0(\"https://mor.nlm.nih.gov/RxClass/getRelatedTrees?className=\",res_search,\"&sourceId=\",res_id,\"&drugSources=atc1-4%7Catc%2Cepc%7Cdailymed%2Cmeshpa%7Cmesh%2Cdisease%7Cndfrt%2Cchem%7Cdailymed%2Cmoa%7Cdailymed%2Cpe%7Cdailymed%2Cpk%7Cndfrt%2Cva%7Cndfrt\")\n              \n              # Obtain the therapeutic class based on the selected tier\n              res_drug_to_class$TIER[i] <- unlist(strsplit(content(GET(url4))$paths[[1]]$path,\"\\\\|\"))[tier+1] %>% tolower()\n              \n            }\n            temp_drug_to_calss_multi[[j]] = res_drug_to_class\n            \n          } else {\n            temp_drug_to_calss_multi[[j]] = data.frame(\"DRUG\" = med_2[j],tiername=\"\")\n          }\n          Sys.sleep(.5)\n        },\n        # Error catching\n        error = function(e){temp_drug_to_calss_multi[[j]] = data.frame(\"DRUG\" = med_2[j],tiername=\"api error\")})\n      }\n    }\n    out = list(med_to_drug_multi,temp_drug_to_calss_multi)\n  }\n  \n  return(out)\n}\n```\n# Write the changes to the csv file\n```{r}\nwrite.csv(data_med_to_drug,\"drug_in_med_updated.csv\",row.names = FALSE)\nwrite.csv(data_drug_1,\"map_by_drug_1_updated.csv\",row.names = FALSE)\nwrite.csv(data_drug_2,\"map_by_drug_2_updated.csv\",row.names = FALSE)\nwrite.csv(data_drug_3,\"map_by_drug_3_updated.csv\",row.names = FALSE)\nwrite.csv(data_drug_4,\"map_by_drug_4_updated.csv\",row.names = FALSE)\n```\n# Test Example - an already existed medication\n```{r}\ntest_med = \"fentanyl (pf) 50 mcg/ml injection solution\"\ntest_tier = 4\nresult = findOrUpdate(test_med,test_tier)\n```\n\n# Test Example - a new medication but its drug is in the record\n```{r}\ntest_med = \"fentanyl (pf) 500 mcg/ml injection solution\"\ntest_tier = 4\nresult = findClass(test_med,test_tier)\n```\n\n# Test Example - a new medication with 2 drugs \n```{r}\ntest_med = \"fentanyl-acetaminophen 50mg\"\ntest_tier = 4\nresult = findClass(test_med,test_tier)\n\n```\n\n",
    "created" : 1516295979171.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "896065496",
    "id" : "73CB68B2",
    "lastKnownWriteTime" : 1516242353,
    "last_content_update" : 1516242353,
    "path" : "~/Downloads/medications_version_3.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}